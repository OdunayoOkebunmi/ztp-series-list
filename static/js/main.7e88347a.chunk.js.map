{"version":3,"sources":["components/FormInput/form-input-styles.js","components/FormInput/form-input.js","components/SearchBar/search-bar.js","components/Spinner/spinner-styles.js","components/Spinner/spinner.js","components/Series/series-card-styles.js","components/Series/series-episode-list.js","components/Series/series-info.js","components/Series/series.js","page/Home.js","App.js","serviceWorker.js","index.js"],"names":["GroupContainer","styled","div","FormInputContainer","input","FormInput","handleChange","props","label","onChange","SearchBar","queryName","handleSubmit","onSubmit","type","name","placeholder","required","value","className","Button","variant","SpinnerOverlay","SpinnerContainer","Spinner","Name","h1","Title","h3","CardContainer","SeriesList","episodes","map","episode","index","Card","key","Img","src","image","original","style","margin","width","Text","summary","replace","SeriesInfo","series","premiered","runtime","genres","description","premieredDate","Date","toDateString","length","Body","Series","state","isFetching","event","preventDefault","setState","fetch","then","response","json","_embedded","target","this","Component","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e88347a.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst subColor = 'grey';\n\nexport const GroupContainer = styled.div`\n  position: relative;\n  margin: 45px 0;\n\n`;\n\nexport const FormInputContainer = styled.input`\n  background: none;\n  background-color: white;\n  color: ${subColor};\n  font-size: 18px;\n  padding: 10px 10px 10px 5px;\n  border-radius: 0;\n  border: 1px solid ${subColor};\n  margin: 0 auto;\n    display: block;\n    width: 30%;\n\n`;\n","import React from 'react';\n\nimport {\n  FormInputContainer, GroupContainer\n} from './form-input-styles';\n\nconst FormInput = ({ handleChange, label, ...props }) => (\n  <GroupContainer>\n    <FormInputContainer\n      onChange={ handleChange }\n      { ...props } />\n  </GroupContainer>\n);\n\nexport default FormInput;","import React from 'react';\nimport FormInput from '../FormInput/form-input';\nimport { Button } from 'react-bootstrap'\n\nconst SearchBar = ({ handleChange, queryName, handleSubmit }) => {\n\n  return (\n    <div>\n      <form onSubmit={ handleSubmit }>\n        <FormInput\n          type='text'\n          name='searchQuery'\n          placeholder='Enter TV series title'\n          required\n          onChange={ handleChange }\n          value={ queryName }\n        />\n        <div className=\"text-center\">\n          <Button\n            type='submit'\n            variant=\"primary\"\n            className=\"text-center\">\n            Submit</Button>\n        </div>\n      </form>\n\n    </div>\n  )\n}\n\nexport default SearchBar;","import styled from 'styled-components';\n\nexport const SpinnerOverlay = styled.div`\n  height: 60vh;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const SpinnerContainer = styled.div`\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n  border: 3px solid rgba(195, 195, 195, 0.6);\n  border-radius: 50%;\n  border-top-color: #636767;\n  animation: spin 1s ease-in-out infinite;\n  -webkit-animation: spin 1s ease-in-out infinite;\n  @keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    to {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n`;","import React from 'react';\nimport { SpinnerContainer, SpinnerOverlay } from './spinner-styles'\n\nconst Spinner = () => (\n  <SpinnerOverlay>\n    <SpinnerContainer />\n  </SpinnerOverlay>\n)\n\nexport default Spinner;","import styled from 'styled-components';\n\n\n\nexport const Name = styled.h1`\nfont-size:35px;\nfont-weight:bold;\n`;\n\nexport const Title = styled.h3`\nfont-weight:bold;\n`;\n\nexport const CardContainer = styled.div`\npadding:15px;\n`","import React from 'react';\nimport { Card } from 'react-bootstrap';\n\nconst SeriesList = ({ episodes }) => {\n  return (\n    <div>\n      { episodes.map((episode, index) => (\n        <Card key={ index } className=\"py-5\">\n          <div className=\"row\">\n            <div className=\"col-sm-3\">\n              <Card.Img variant=\"top\" src={ episode.image ? episode.image.original : null } style={ { margin: '20px', width: '150px' } } />\n            </div>\n            <div className=\"col-sm-9\">\n              <h4>\n                { episode.name }\n              </h4>\n              <Card.Text className=\"px-3\">{ episode.summary ? episode.summary.replace(/<[^>]*>/g, '') : null }</Card.Text>\n            </div>\n          </div>\n        </Card>\n\n      )) }\n    </div>\n  )\n}\nexport default SeriesList;","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { Title, CardContainer, Name } from './series-card-styles';\nimport SeriesList from './series-episode-list';\n\nconst SeriesInfo = ({ series: { name, image, summary, premiered, runtime, genres }, episodes, series }) => {\n  const description = summary.replace(/<[^>]*>/g, '');\n  const premieredDate = new Date(premiered).toDateString();\n\n  return (\n\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-sm-4\">\n          <Card>\n            <CardContainer>\n              <Name>{ name }</Name>\n              <p>Number of Episodes: { episodes.length }</p>\n              <p>Premiered: { premieredDate }</p>\n              <p>Runtime: { runtime } mins</p>\n              <p>Genre: { genres[0] } </p>\n              <Card.Img variant=\"top\" src={ image.original } />\n              <Card.Body>\n                <Card.Text>\n                  { description }\n                </Card.Text>\n              </Card.Body>\n            </CardContainer>\n          </Card>\n        </div>\n        <div className=\"col-sm-8\">\n          <Title> Episodes</Title>\n          <SeriesList episodes={ episodes } />\n        </div>\n\n      </div>\n    </div>\n\n  )\n}\nexport default SeriesInfo;","import React, { Component } from \"react\";\nimport SearchBar from '../SearchBar/search-bar';\nimport Spinner from '../Spinner/spinner';\nimport SeriesInfo from './series-info';\n\nclass Series extends Component {\n  state = {\n    series: null,\n    queryName: '',\n    isFetching: false,\n    episodes: [],\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.setState({ isFetching: true })\n    fetch(`https://api.tvmaze.com/singlesearch/shows/?q=${this.state.queryName}&embed=episodes`)\n      .then(response => response.json())\n      .then(json => this.setState({ series: json, isFetching: false, queryName: '', episodes: json._embedded.episodes }));\n  }\n\n  handleChange = event => {\n    const { value } = event.target;\n    this.setState({ queryName: value })\n\n  };\n\n  render () {\n    const { queryName, isFetching, series, episodes } = this.state\n    return (\n      <div>\n        <SearchBar\n          queryName={ queryName }\n          handleChange={ this.handleChange }\n          handleSubmit={ this.handleSubmit }\n        />\n        { isFetching && <Spinner /> }\n        { series ? (\n          <SeriesInfo\n            series={ series }\n            episodes={ episodes }\n          />\n        ) : null }\n\n      </div>\n    );\n  }\n}\n\nexport default Series;","import React from 'react';\nimport Series from '../components/Series/series';\n\n\nconst Home = () => (\n  <Series />\n)\n\nexport default Home;","import React from 'react';\nimport Home from './page/Home'\nfunction App () {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}